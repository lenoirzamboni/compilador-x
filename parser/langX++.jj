/*************************************************************************
  Arquivo a ser processado pelo programa JavaCC.
  Contém:
  - descrição do analisador léxico para a linguagem X++ 
  - descrição do analisador sintático para a linguagem X++
  - recuperação de erros sintáticos

Autor: Francisco Teixeira, Marcelo Ecker e Péricles Cesar da Costa
Este programa é parte do livro "Construção de compiladores usando ferra..."
 ************************************************************************/
options {
    STATIC = false;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
    package parser;
    import java.io.*;
    import recovery.*; //importa as classes de recuperação de erros do AS

    public class langX {
        final static String Version = "X++ Compiler - Version 1.0 - 2004";
        int contParseError = 0;           // contador de erros sintáticos
        boolean debug_recovey;
        TOken lastError = null

        // Define o método "main" da classe langX.  
        public  static void main(String args[]) throws ParseException 
        {
            boolean debug = false;

            String filename = ""; // nome do arquivo a ser analisado
            langX parser;     // analisador léxico/sintático
            int i;
            boolean ms = false;

            System.out.println(Version);
            // lê os parâmetros passados para o compilador
            for (i = 0; i < args.length - 1; i++){
               if (args[i].equals("-debug_AS"))
                  debug = true;
	       else		
	       	if (args[i].equals("-debug_recovery") )		
	            debug_recovery = true
                else {
                  System.out.println("Uso: java langX [-short] arquivo");
                  System.exit(0);
              }
            }

            if (args[i].equals("-"))
            {       // lê da entrada padrão      
                System.out.println("Lendo a entrada padrão . . .");
                parser = new langX(System.in); // cria AS
            }
            else 
            {       // lê do arquivo
                filename = args[args.length-1];  
                System.out.println("Lendo o arquivo " + filename + " . . .");
                try {  // cria AS
                    parser = new langX(new java.io.FileInputStream(filename));
                } 
                catch (java.io.FileNotFoundException e) {
                    System.out.println("File " + filename + " not found.");
                    return;
                }
            } 

            if (!debug) parser.disable_tracing(); // desabilita verbose do AS

            try {
                parser.program();   // chama o método que faz a análise
            }
            catch (ParseEOFException e)
            {
                System.err.println(e.getMessage());
                //parser.contParseError = 1;   não existe recuperação de erros
            }
            finally {
                System.out.println(parser.token_source.foundLexError() +
                        " erros léxico encontrados");
                System.out.println(parser.contParseError + "erros sintáticos encontrados");
            }

        }  // main

        static public String im(int x)
        {
            int k;
            String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\"");
            try {s = s.substring(1,k);}
            catch (StringIndexOutOfBoundsException e)
            {}
            return s;
        }

	boolean eof;    // variável que indica se EOF foi alcançado
	// o método abaixo consome tokens até alcançar um que pertença ao conjunto
	// de sincronização


	void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
		{
		Token tok;

		   if ( debug_recovery) // informação sobre a recuperação
		   {
		       System.out.println();
		       System.out.println("*** " + met + " ***");
		       System.out.println("     Syncronizing Set: " + g);
		   }

		   if (g == null) throw e; // se o conjunto é null, propaga a exceção

		   tok = getToken(1); // pega token corrente
		   while ( ! eof )  // se não chegou ao fim do arquivo
		   {
			if ( g.contains(tok.kind ) ) //achou um token no conjunto
			{
			     if ( debug_recovery)
			       System.out.println("     Found syncronizing token: " + 
				                   im(tok.kind));
			     break;
			}
			if (debug_recovery)
			     System.out.println("     Ignoring token: " + im(tok.kind));
			getNextToken();     // pega próximo token       
			tok = getToken(1);
			if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
			    eof = true;
		    }
		   if ( tok != lastError)
		   {
			System.out.println(e.getMessage());
			lastError = tok;
			contParseError++;  // incrementa número de erros
		   }
		   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
		}

	

    }  // langX

PARSER_END(langX)

    TOKEN_MGR_DECLS :
{
    int countLexError = 0;

    public int foundLexError()
    {
        return countLexError;
    }

}


/* Espacos a serem desprezados no inicio de cada token */

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

SKIP :
{
    "/*" : multilinecomment
}

SKIP :
{
    "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
    "*/" : DEFAULT
    | <~[]>
}

<singlelinecomment> SKIP:
{
    <["\n","\r"]> : DEFAULT
    | <~[]>
}


/* Palavras reservadas */

TOKEN :
{
    < BREAK: "break" > 
    | < CLASS: "class" >
    | < CONSTRUCTOR: "constructor" >
    | < ELSE: "else" >
    | < EXTENDS: "extends" >
    | < FOR: "for" >
    | < IF: "if" >
    | < INT: "int" >
    | < NEW: "new" >
    | < PRINT: "print" >
    | < READ: "read" >
    | < RETURN: "return" >
    | < STRING: "string" >
    | < SUPER: "super" >
    /*novos itens */
    | < WHILE: "while" >
    | < DO: "do" >
    | < SWITCH: "switch" >
    | < CASE: "case" >
    | < DEFAULTT: "default" >
    | < CHAR: "char" >
    | < DOUBLE: "double" >

    | < BYTE: "byte" >
    | < SHORT: "short" >
    | < LONG: "long" >
    | < FLOAT: "float" >
    | < FINAL: "final" >
    | < PUBLIC: "public" >
    | < PRIVATE: "private" >
    | < PROTECTED: "protected" >
    | < BOOL: "bool" >
}

/* constantes */

TOKEN :
{
    < byte_constant: (<DIGIT>)+ >
    |
    < short_constant: (<DIGIT>)+ >
    |
    < int_constant:(  
            ( (<DIGIT>)+ ) // números decimais 
            | (["0"-"7"] (["0"-"7"])* ["o", "O"] ) // octais 
            | ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] ) //Hexadecimais 
            | (["0"-"1"] (["0"-"1"])* ["b", "B"]) // binarios
    ) >
    |
    < long_constant:( (<DIGIT>)+ ["l", "L"] ) >
    |
    < float_constant:( (<DIGIT>)* "." (<DIGIT>)+ ["f","F"]) >
    |
    < double_constant:( (<DIGIT>)* "." (<DIGIT>)+ ) >
    |
    < char_constant:
    "'" ( ["a"-"f","A"-"F"] | <DIGIT> ) "'" >
    |
    < string_constant:    
    "\""( ~["\"","\n","\r"])* "\"" >
    |
    < bool_constant: (<TRUE> | <FALSE>) >
    |
    < #TRUE: "true" >
    |
    < #FALSE: "false" >
    |
    < null_constant: "null" > 
}

/* Identificadores */

TOKEN :
{
    < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
        |
        < #LETTER:["A"-"Z","a"-"z"] >
        |
        < #DIGIT:["0"-"9"] >
}

/* Simbolos especiais */

TOKEN :
{
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < SEMICOLON: ";" >
    | < COMMA: "," >
    | < DOT: "." >
    | < TODOT: ":" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
  | < GT: ">" >
  | < LT: "<" >
  | < EQ: "==" >
  | < LE: "<=" >
  | < GE: ">=" >
  | < NEQ: "!=" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < REM: "%" >
  /*Adicionado para o trabalho*/
  | < AND: "&&">
  | < OR: "||">
  | < XOR: "^">
  | < NOT: "!">
}

/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
    <INVALID_LEXICAL: 
        (~ ["a"-"z", "A"-"Z",
         "0"-"9",
         "\"",
         "(",
         ")",
         "[",
         "]",
         "{",
         "}",
         ";",
         ",",
         ".",
         "=",
         ">",
         "<",
         "!",
         "+",
         "-",
         "*",
         "/",
         "%",
         " ",
         "\t",
         "\n",
         "\r",
         "\f"
             ])+>
             {
                 System.err.println("Line " + input_stream.getEndLine() + 
                         " - Invalid string found: " + image);
                 countLexError++;
             }
    |
        <INVALID_CONST: 
        "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
        {
            System.err.println("Line " + input_stream.getEndLine() + 
                    " - String constant has a \\n: " + image);
            countLexError++;
        }

}

// A partir daqui o analisador sintático é construido


void program() throws ParseEOFException :
{
RecoverySet g = First.program;
}
{   
    // nossa implementação
    // [ classlist() ] <EOF>
<EOF> 
|
    classlist(g) 
    try { 
      <EOF> 
    }
    catch (ParseException e)
    {
       consumeUntil(g, e, "program");
     }
   [ program() ]    
}

void classlist(coverySet g) throws ParseEOFException :
{
RecoverySet f = First.classlist.union(g);
}
{
   classdecl(f) [LOOKAHEAD(2) classlist(g)]
}

void classdecl(RecoverySet g) throws ParseEOFException
{
}
{
  try {
    modifs() <CLASS> <IDENT> [ <EXTENDS> <IDENT> ] classbody() 
  }catch(ParseException e){
    consumeUntil(g, e, "classdecl");
  }
}

void classbody(RecoverySet g) throws ParseEOFException:
{
RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
            f3 = First.methoddecl.union(g).remove(IDENT),
            f4 = First.constructdecl.union(f3).remove(IDENT),
            f5 = First.vardecl.union(f4).remove(IDENT);                         
}
{
  try {
   <LBRACE>
      [LOOKAHEAD(2) classlist(f5)]
      (LOOKAHEAD(4) modifs() vardecl(f4) <SEMICOLON>)*
      (constructdecl(f4))*
      (LOOKAHEAD(4) modifs() methoddecl(f3))* 
   <RBRACE>
   }catch (ParseException e)
   {
       consumeUntil(g, e, "classbody");
   }
}

void modifvisibility():
{
}
{
    ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) 
}

void modifs():
{
}
{
    [modifvisibility()] [<FINAL>]
}

/*Types foi definido para simplificar o código */
void types(RecoverySet g) throws ParseEOFException:
{
}
{
try{
  (<BYTE> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <CHAR> | <STRING> | <IDENT>) 
}catch (ParseException e)
{
   consumeUntil(g, e, "types");
}
}

void assignment(RecoverySet g) throws ParseEOFException:
{
}
{
    <ASSIGN> (alocexpression(g) | expression(g))
}

void vardecl(RecoverySet g) throws ParseEOFException:
{
RecoverySet f = new RecoverySet(IDENT).union(g);
}
{
try {
/* adicionado a atribuição para sempre poder declarar e iniciar uma variavel fora do método */
  types(f) <IDENT> ( <LBRACKET> <RBRACKET>)* (LOOKAHEAD(1) assignment(g))?
  (<COMMA> <IDENT> ( <LBRACKET> <RBRACKET>)* )* (LOOKAHEAD(1) assignment(g))?
}
catch (ParseException e)
{
   consumeUntil(g, e, "vardecl");
}
}

void constructdecl(RecoverySet g) throws ParseEOFException:
{
}
{
try {
    <CONSTRUCTOR> methodbody(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "constructdecl");
}
}

//TO DO: é precioso inclur public, final, private....
void methoddecl(RecoverySet g) throws ParseEOFException:
{
}
{
  try {
   types() (<LBRACKET> <RBRACKET>)* 
   <IDENT> methodbody(g)
  }
  catch (ParseException e)
  {
   consumeUntil(g, e, "methoddecl");
  }

}

void methodbody(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {

    <LPAREN> paramlist(f) <RPAREN> statement(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "methodbody");
}

}

void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{
try {
   [
    types() <IDENT> (<LBRACKET> <RBRACKET>)* 
    (<COMMA> types() <IDENT> (<LBRACKET> <RBRACKET>)* )*
   ]
}
catch (ParseException e)
{
   consumeUntil(g, e, "paramlist");
}
}

void statement(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
try {
    LOOKAHEAD(4)
    vardecl() <SEMICOLON>
|
    atribstat() <SEMICOLON> 
|
    printstat() <SEMICOLON>
|
    readstat() <SEMICOLON>
|
    returnstat() <SEMICOLON>
|
    superstat() <SEMICOLON>
|
    ifstat() 
|
    forstat() 
|
    whilestat()
|
    dowhilestat()
|
    switchstat()
|
    <LBRACE> statlist() <RBRACE> 
|
    <BREAK> <SEMICOLON>
|
    <SEMICOLON>
}
catch (ParseException e)
{
   consumeUntil(g, e, "statement");
}
}


void atribstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
try {
    lvalue(f1) assignment(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "atribstat");
}

}

void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
try {
    <PRINT> expression(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "printstat");
}
}

void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
try {
    <READ> lvalue(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "readstat");
}
}


void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{  
try {
    <RETURN> [expression(g)]
}
catch (ParseException e)
{
   consumeUntil(g, e, "returnstat");
}
}


void superstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    <SUPER> <LPAREN> arglist(f) <RPAREN>
}catch (ParseException e)
{
   consumeUntil(g, e, "superstat");
}
}

void ifstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
}
{
try{
    <IF> <LPAREN> expression(f1) <RPAREN> statement(f2)
    [LOOKAHEAD(1) <ELSE> statement(g)]
}catch (ParseException e)
{
   consumeUntil(g, e, "ifstat");
}
}



void forstat(RecoverySet g) throws ParseEOFException:
{
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try{
    <FOR> <LPAREN> [atribstat(f1)] <SEMICOLON>
                   [expression(f1)] <SEMICOLON>
                   [atribstat(f2)] <RPAREN>
                    statement(g)
}catch (ParseException e)
{
   consumeUntil(g, e, "forstat");
}
}

void whilestat(RecoverySet g) throws ParseEOFException:
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g);
}
{
try {
  <WHILE> <LPAREN> expression(f1) <RPAREN> statement(g)
}
catch (ParseException e)
{
   consumeUntil(g, e, "whilestat");
}
}

void dowhilestat(RecoverySet g) throws ParseEOFException:
{ 
RecoverySet f1 = new RecoverySet(LPAREN).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try {
  <DO> statement(f1) <LPAREN> expression(f2) <RPAREN> <SEMICOLON>
}
catch (ParseException e)
{
   consumeUntil(g, e, "dowhilestat");
}
}

void switchstat(RecoverySet g) throws ParseEOFException:
{
}
{
try{
    <SWITCH> <LPAREN> <IDENT> <RPAREN> <LBRACE> [switchcasesstat(g)] <RBRACE>
}
catch (ParseException e)
{
   consumeUntil(g, e, "switchstat");
}
}

void switchcasesstat(RecoverySet g) throws ParseEOFException:
{
}
{
try{
    switchcasestat(g) [switchcasesstat(g)]
}
catch (ParseException e)
{
   consumeUntil(g, e, "switchcasestat");
}
}

void switchcasestat(RecoverySet g) throws ParseEOFException:
{
RecoverySet f1 = new RecoverySet(TODOT).union(g);
}
{
    ( <CASE> factor(f1) | <DEFAULTT> ) <TODOT> statement(g)
}


void  statlist(RecoverySet g) throws ParseEOFException:
{
RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
   statement(f) [statlist(g)]
}

void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
try {
   <IDENT> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist() <RPAREN>]
         )*
}
catch (ParseException e)
{
   consumeUntil(g, e, "lvalue");
}
}

void alocexpression(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(RBRACKET).union(g);
}
{
    <NEW> ( 
             LOOKAHEAD(2) <IDENT> <LPAREN> arglist(f1) <RPAREN> | 
             types()
             (<LBRACKET> expression(f2) <RBRACKET>)+
          )
} 

void expression(RecoverySet g) throws ParseEOFException :
{
}
{
try {
    numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ> | <AND> | <OR> | <XOR>) numexpr()]
}
catch(ParseException e)
{
   consumeUntil(g, e, "expression");
}
}

void numexpr() throws ParseEOFException :
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term() throws ParseEOFException :
{
}
{
    unaryexpr() ((<STAR> | <SLASH>| <REM>) unaryexpr())*
}

void unaryexpr() throws ParseEOFException :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor() throws ParseEOFException :
{
}
{

   (<NOT>)? 
    ( 
       <char_constant> |
       <byte_constant> | 
       <int_constant> | 
       <float_constant> | 
       <double_constant> |
       <string_constant> | 
       <bool_constant> |
       <null_constant> |
       lvalue() |
       <LPAREN> expression(null) <RPAREN>)
}

void arglist(RecoverySet g) throws ParseEOFException :
{
RecoverySet f =  new RecoverySet(COMMA).union(g);
}
{
    [expression(f) (<COMMA> expression(f))*]
}
