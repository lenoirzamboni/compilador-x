/*************************************************************************
  Arquivo a ser processado pelo programa JavaCC.
  Contém:
  - descrição do analisador léxico para a linguagem X++ 
  - descrição do analisador sintático para a linguagem X++

Autor: Francisco Teixeira, Marcelo Ecker e Péricles Cesar da Costa
Este programa é parte do livro "Construção de compiladores usando ferra..."
 ************************************************************************/
options {
    STATIC = false;
    DEBUG_LOOKAHEAD = true;
    DEBUG_TOKEN_MANAGER=true;
    DEBUG_PARSER=true;
}

PARSER_BEGIN(langX)
    package parser;
    import java.io.*;


    public class langX {
        final static String Version = "X++ Compiler - Version 1.0 - 2004";
        int contParseError = 0;           // contador de erros sintáticos


        // Define o método "main" da classe langX.  
        public  static void main(String args[]) throws ParseException 
        {
            boolean debug = false;

            String filename = ""; // nome do arquivo a ser analisado
            langX parser;     // analisador léxico/sintático
            int i;
            boolean ms = false;

            System.out.println(Version);
            // lê os parâmetros passados para o compilador
            for (i = 0; i < args.length - 1; i++)
            {


            }

            if (args[i].equals("-"))
            {       // lê da entrada padrão      
                System.out.println("Reading from standard input . . .");
                parser = new langX(System.in); // cria AS
            }
            else 
            {       // lê do arquivo
                filename = args[args.length-1];  
                System.out.println("Reading from file " + filename + " . . .");
                try {  // cria AS
                    parser = new langX(new java.io.FileInputStream(filename));
                } 
                catch (java.io.FileNotFoundException e) {
                    System.out.println("File " + filename + " not found.");
                    return;
                }
            } 

            if (! debug) parser.disable_tracing(); // desabilita verbose do AS

            try {
                parser.program();   // chama o método que faz a análise
            }
            catch (ParseException e)
            {
                System.err.println(e.getMessage());
                parser.contParseError = 1;   // não existe recuperação de erros
            }
            finally {
                System.out.println(parser.token_source.foundLexError() +
                        " Lexical Errors found");
                System.out.println(parser.contParseError + " Syntactic Errors found");
            }

        }  // main

        static public String im(int x)
        {
            int k;
            String s;
            s = tokenImage[x];
            k = s.lastIndexOf("\"");
            try {s = s.substring(1,k);}
            catch (StringIndexOutOfBoundsException e)
            {}
            return s;
        }

    }  // langX

PARSER_END(langX)

    TOKEN_MGR_DECLS :
{
    int countLexError = 0;

    public int foundLexError()
    {
        return countLexError;
    }

}


/* Espacos a serem desprezados no inicio de cada token */

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

SKIP :
{
    "/*" : multilinecomment
}

SKIP :
{
    "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
    "*/" : DEFAULT
    | <~[]>
}

<singlelinecomment> SKIP:
{
    <["\n","\r"]> : DEFAULT
    | <~[]>
}


/* Palavras reservadas */

TOKEN :
{
    < BREAK: "break" > 
    | < CLASS: "class" >
    | < CONSTRUCTOR: "constructor" >
    | < ELSE: "else" >
    | < EXTENDS: "extends" >
    | < FOR: "for" >
    | < IF: "if" >
    | < INT: "int" >
    | < NEW: "new" >
    | < PRINT: "print" >
    | < READ: "read" >
    | < RETURN: "return" >
    | < STRING: "string" >
    | < SUPER: "super" >
    /*novos itens */
    | < WHILE: "while" >
    | < DO: "do" >
    | < SWITCH: "switch" >
    | < CASE: "case" >
    | < DEFAULTT: "default" >
    | < CHAR: "char" >
    | < DOUBLE: "double" >

    | < BYTE: "byte" >
    | < SHORT: "short" >
    | < LONG: "long" >
    | < FLOAT: "float" >
    | < FINAL: "final" >
    | < PUBLIC: "public" >
    | < PRIVATE: "private" >
    | < PROTECTED: "protected" >
    | < BOOL: "bool" >
}

/* constantes */

TOKEN :
{
    < byte_constant: (<DIGIT>)+ >
    |
    < short_constant: (<DIGIT>)+ >
    |
    < int_constant:(  
            ( (<DIGIT>)+ ) // números decimais 
            | (["0"-"7"] (["0"-"7"])* ["o", "O"] ) // octais 
            | ((<DIGIT> | ["A"-"F","a"-"f"])* ["h", "H"] ) //Hexadecimais 
            | (["0"-"1"] (["0"-"1"])* ["b", "B"]) // binarios
    ) >
    |
    < long_constant:( (<DIGIT>)+ ["l", "L"] ) >
    |
    < float_constant:( (<DIGIT>)* "." (<DIGIT>)+ ["f","F"]) >
    |
    < double_constant:( (<DIGIT>)* "." (<DIGIT>)+ ) >
    |
    < char_constant:
    "'" ( ["a"-"f","A"-"F"] | <DIGIT> ) "'" >
    |
    < string_constant:    
    "\""( ~["\"","\n","\r"])* "\"" >
    |
    < bool_constant: (<TRUE> | <FALSE>) >
    |
    < #TRUE: "true" >
    |
    < #FALSE: "false" >
    |
    < null_constant: "null" > 
}

/* Identificadores */

TOKEN :
{
    < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
        |
        < #LETTER:["A"-"Z","a"-"z"] >
        |
        < #DIGIT:["0"-"9"] >
}

/* Simbolos especiais */

TOKEN :
{
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < SEMICOLON: ";" >
    | < COMMA: "," >
    | < DOT: "." >
    | < TODOT: ":" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
  | < GT: ">" >
  | < LT: "<" >
  | < EQ: "==" >
  | < LE: "<=" >
  | < GE: ">=" >
  | < NEQ: "!=" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < REM: "%" >
  /*Adicionado para o trabalho*/
  | < AND: "&&">
  | < OR: "||">
  | < XOR: "^">
  | < NOT: "!">
}

/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
    <INVALID_LEXICAL: 
        (~ ["a"-"z", "A"-"Z",
         "0"-"9",
         "\"",
         "(",
         ")",
         "[",
         "]",
         "{",
         "}",
         ";",
         ",",
         ".",
         "=",
         ">",
         "<",
         "!",
         "+",
         "-",
         "*",
         "/",
         "%",
         " ",
         "\t",
         "\n",
         "\r",
         "\f"
             ])+>
             {
                 System.err.println("Line " + input_stream.getEndLine() + 
                         " - Invalid string found: " + image);
                 countLexError++;
             }
    |
        <INVALID_CONST: 
        "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
        {
            System.err.println("Line " + input_stream.getEndLine() + 
                    " - String constant has a \\n: " + image);
            countLexError++;
        }

}

// A partir daqui o analisador sintático é construido

void program() :
{
}
{
    [ classlist() ] <EOF>
}

void classlist(): 
{
}
{
   classdecl() [classlist() ]
}

void classdecl():
{
}
{
  <CLASS> <IDENT> [ <EXTENDS> <IDENT> ] classbody() 
}

void classbody():
{                         
}
{
   <LBRACE>
      [classlist()]
      (LOOKAHEAD(3) vardecl() <SEMICOLON>)*
      (constructdecl())*
      (methoddecl())* 
   <RBRACE>
}

void modifaccess():
{
}
{
    ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) (<FINAL>)?
}

/*Types foi definido para simplificar o código */
void types():
{
}
{
  (<BYTE> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <CHAR> | <STRING> | <IDENT>) 
}

void assignment():
{
}
{
    <ASSIGN> (alocexpression() | expression())
}

void vardecl():
{
}
{/* adicionado a atribuição para sempre poder declarar e iniciar uma variavel fora do método */
  types() <IDENT> ( <LBRACKET> <RBRACKET>)* (LOOKAHEAD(1) assignment())?
  (<COMMA> <IDENT> ( <LBRACKET> <RBRACKET>)* )* (LOOKAHEAD(1) assignment())?
}

void constructdecl():
{
}
{
    <CONSTRUCTOR> methodbody()
}


void methoddecl():
{
}
{
   types() (<LBRACKET> <RBRACKET>)* 
   <IDENT> methodbody()
}

void methodbody():
{
}
{
    <LPAREN> paramlist() <RPAREN> statement()
}

void paramlist():
{
}
{
   [
    types() <IDENT> (<LBRACKET> <RBRACKET>)* 
    (<COMMA> types() <IDENT> (<LBRACKET> <RBRACKET>)* )*
   ]
}

void statement():
{
}
{
    LOOKAHEAD(4)
    vardecl() <SEMICOLON>
|
    atribstat() <SEMICOLON> 
|
    printstat() <SEMICOLON>
|
    readstat() <SEMICOLON>
|
    returnstat() <SEMICOLON>
|
    superstat() <SEMICOLON>
|
    ifstat() 
|
    forstat() 
|
// Incluindo while, do while e switch case
    whilestat()
|
    dowhilestat() <SEMICOLON>
|
    switchstat()
|
    <LBRACE> statlist() <RBRACE> 
|
    <BREAK> <SEMICOLON>
|
    <SEMICOLON>
}


void atribstat():
{
}
{
    lvalue() assignment()
}

void printstat():
{
}
{
    <PRINT> expression()
}

void readstat():
{
}
{
    <READ> lvalue()
}


void returnstat():
{
}
{  
    <RETURN> [expression()]
}


void superstat():
{
}
{
    <SUPER> <LPAREN> arglist() <RPAREN>
}

void ifstat():
{
}
{
    <IF> <LPAREN> expression() <RPAREN> statement()
    [LOOKAHEAD(1) <ELSE> statement()]
}



void forstat():
{
}
{
    <FOR> <LPAREN> [atribstat()] <SEMICOLON>
                   [expression()] <SEMICOLON>
                   [atribstat()] <RPAREN>
                    statement()
}

void whilestat():
{
}
{
  <WHILE><LPAREN> expression() <RPAREN> statement()
}
void dowhilestat():
{ 
}
{
  <DO> statement() <LPAREN> expression() <RPAREN>
}

void switchstat():
{
}
{
  <SWITCH> <LPAREN> <IDENT> <RPAREN> <LBRACE> switchcasestat() <RBRACE>
}

void switchcasestat():
{
}
{
  (<CASE> factor() | <DEFAULTT>) <TODOT> statement()
}


void  statlist() :
{
}
{
   statement() [statlist()]
}

void lvalue() :
{
}
{
   <IDENT> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist() <RPAREN>]
         )*
}

void alocexpression() :
{
}
{
    <NEW> ( 
             LOOKAHEAD(2) <IDENT> <LPAREN> arglist() <RPAREN> | 
             types()
             (<LBRACKET> expression() <RBRACKET>)+
          )
} 

void expression() :
{
}
{
    numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ> | <AND> | <OR> | <XOR>) numexpr()]
}

void numexpr():
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term():
{
}
{
    unaryexpr() ((<STAR> | <SLASH>| <REM>) unaryexpr())*
}

void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor():
{
}
{

   (<NOT>)? 
    ( 
       <char_constant> |
       <byte_constant> | 
       <int_constant> | 
       <float_constant> | 
       <double_constant> |
       <string_constant> | 
       <bool_constant> |
       <null_constant> |
       lvalue() |
       <LPAREN> expression() <RPAREN>)
}

void arglist():
{
}
{
    [expression() (<COMMA> expression())*]
}
